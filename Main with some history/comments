#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h> 

void getInput();
void shell_loop();
int find_command(char []);
void fork_command();

int running = 0;
char *tkarray[512]; //array of individual tokens

char input[512]; //user input

#define historySize 20	// The size of the history array
int cmdcount = 0;		// Keeps keeps track of the number of commands used
char *history[historySize];	// Pointer to the specific commands used

void main(){
	shell_loop();

}

void newCmd(char* command) { //This function adds the new command to the history list
     history[cmdcount%historySize] = command;
printf("command %s \n", command);	
printf("dmvn %s \n", history[(cmdcount%historySize)-1]);
     cmdcount++;
 }

void listHistory(){ //this function calls and displays the history
for(int i = 0; i < cmdcount ; i++)
        printf(" %s ",history[i]); //displays the history list from most to least recent

	printf("%i \n", cmdcount);
       printf("this  %s \n", history[2]);
}

void shell_loop(){
	
    chdir(getenv("HOME"));

    while(running == 0){
    	printf(":) ");
	getInput();

	
    }   

}

 


void getInput(){

	char *token;
	int nt = 0; //number of tokens

	for(int i = 0; i<512; i++){  //loop resets input and tkarray
			tkarray[i] = '\0';
			input[i] = '\0';
	}

	if(fgets(input, 512, stdin) == NULL) { //TODO comment
		printf("\n");
		running = 1;
		return;
	}

	input[strlen(input)-1] = '\0'; //adds null to end of input string

	token = strtok (input, " |><&;\t\n"); //makes token until one of the things show up

	if (token == NULL){
		return;
	}

	while (token != NULL){
		printf("'%s' \n", token); //prints the token
		tkarray[nt] = token;	//adds current token to array
			
		token = strtok (NULL, " |><&;\t\n"); //makes token until one of the things show up
		nt++;	//increments number of tokens
	}
	tkarray[nt] = NULL; //sets last token in array to null

	if(strncmp(tkarray[0], "!", 1) != 0){
	newCmd(input);
	}

	if(strcmp(tkarray[0], "exit") == 0){ //exits the program
		
		if(nt == 1){
			running = 1;
		}else{
			
			printf("Error: exit command doesn't take parameters\n");		

		}
	}

	else if(strcmp(tkarray[0], "history") == 0){ //Command displays history list
		
		if(nt == 1){ //takes one parameter
			listHistory();
		}else{
			
			printf("Error: History command doesn't take parameters\n");		

		}
	}
	
	else if(strncmp(tkarray[0], "!", 1) == 0){ //history invokation
		
		if(strcmp(tkarray[0], "!!") == 0 && nt == 1){
			//do a thing
		}else if(strncmp(tkarray[0], "!-", 2) == 0){
		//also do a thing
		}
		else{
			//do a thing as well		
		}
	}

	else if(strcmp(tkarray[0], "cd") == 0){ //function for cd/change directory
		
		if(nt == 2){
			chdir(tkarray[1]);
			printf("Changing dir\n");
		}else if(nt == 1){	//if no directory specified, goes to top level directory
			chdir(getenv("HOME"));
		}else{
			printf("Error: cd takes 1 argument\n");	
			
		}
	}

	else{
		fork_command();
		}

}

void fork_command(){

pid_t pid;

pid = fork();

if(pid < 0) {
	fprintf(stderr, "Fork Failed");
}

else if(pid == 0){
	execlp(tkarray[0], "ls", NULL);
	//only executed if the above line isn't successful
	perror("Errors"); 
	exit(EXIT_FAILURE);
}

else if(pid > 0){
	wait(NULL);
	printf("Child Complete\n");

}

}


