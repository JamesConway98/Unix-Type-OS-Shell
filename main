#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h> 
#include <stdbool.h>

void getInput();
void shell_loop();
int find_command(char []);
void fork_command();
void setpath(char []);
void getpath();
void writeToFile(char*, char*);
void readFile(char*);
void setAlias(int index);
void printAliases(int amount);
void unalias();
void checkAlias();

int running = 0;
char *tkarray[512];
int numAliases;

typedef struct alias{
	char name[15];
	char command[15];
}alias;

struct alias aliases[10];

#define historySize 20	// The size of the history array
int cmdcount = 0;		// Keeps keeps track of the number of commands used
char *history[historySize];	// Pointer to the specific commands used


void main(){
    
   	readFile(".hist_list.txt");//this outputs the content to the user, do we need that?
	char *path = getenv("PATH"); 
	chdir(getenv("HOME"));
	shell_loop();
	writeToFile(".hist_list.txt", "history");
	setenv("PATH", path, 1); 
	printf("path: %s \n", path);
}


void shell_loop(){

numAliases = 0;

    while(running == 0){
    	printf(":) ");
	    getInput();
    }   

}

void setpath(char *dir) {
	char *oldpath = getenv("PATH");
	setenv("PATH", dir, 1);
	char *path = getenv("PATH");
	if (strcmp(dir, path) == 0) {
		printf("new path is: %s \n", path);
	}
	else {
		printf("Re-pathing has failed, please try again");
		setenv("PATH", oldpath, 1);
	}
}

void getpath() {
	char *path = getenv("PATH");
	printf("%s \n", path);
}


void newCmd(char* command) { //This function adds the new command to the history list
     history[cmdcount%historySize] = command;
printf("command %s \n", command);	
printf("dmvn %s \n", history[(cmdcount%historySize)-1]);
     cmdcount++;
 }

void listHistory(){ //this function calls and displays the history
for(int i = 0; i < cmdcount ; i++)
        printf(" %s ",history[i]); //displays the history list from most to least recent

	printf("%i \n", cmdcount);
       printf("this  %s \n", history[2]);
}


void getInput(){

	char input[512];
	char *token;
	int nt = 0;

	for(int i = 0; i<512; i++){
			tkarray[i] = '\0';
	}

	if(fgets(input, 512, stdin) == NULL) {
		printf("\n");
		running = 1;
		return;
	}

	input[strlen(input)-1] = '\0';

	token = strtok (input, " |><&;\t\n");

	if (token == NULL){
		return;
	}

	while (token != NULL){
		tkarray[nt] = token;
		token = strtok (NULL, " |><&;\t\n");
		nt++;
	}

	tkarray[nt] = NULL;

   	checkAlias();
    
	if(strcmp(tkarray[0], "exit") == 0){
		
		if(nt == 1){
			running = 1;
		}else{
			
			printf("Error: exit command doesn't take parameters\n");		

		}
	}

	else if(strcmp(tkarray[0], "cd") == 0){
		
		if(nt == 2){
			if (chdir(tkarray[1]) == 0) {
				printf("Changing dir\n");
			}else{
				perror("Error: ");
			}
		}else if(nt == 1){

			chdir(getenv("HOME"));

		}else{
			printf("Error: cd takes 1 argument\n");	
			
		}
		
	}

	else if(strcmp(tkarray[0], "history") == 0){ //Command displays history list
		
		if(nt == 1){ //takes one parameter
			listHistory();
		}else{
			
			printf("Error: History command doesn't take parameters\n");		

		}
	}
	
	else if(strncmp(tkarray[0], "!", 1) == 0){ //history invokation
		
		if(strcmp(tkarray[0], "!!") == 0 && nt == 1){
			//do a thing
		}else if(strncmp(tkarray[0], "!-", 2) == 0){
		//also do a thing
		}
		else{
			//do a thing as well		
		}
	}



	else if (strcmp(tkarray[0], "getpath") == 0){
		if (nt == 1) {
			getpath();
		}
		else {
			printf("Getpath does not require any parameters, please try again \n");
		}
	}

	else if (strcmp(tkarray[0], "setpath") == 0){
		if (nt ==2) {
			setpath(tkarray[1]);
		}
		else if (nt != 2) {
			printf("Setpath requires one parameter, please try again. \n");
		}
	}
	
    else if(strcmp(tkarray[0], "alias") == 0){
	
		if(nt >= 3){
			if(numAliases <= 10){
		 setAlias(numAliases);
			numAliases++;}
			else printf("Maximum number of aliases has been reached. unable to add alias.\n");
			}

		else if(nt == 1){
		printAliases(numAliases);}
		
		else{ 
			printf("Error: incorrect number of parameters for alias command.\n");}

}

else if(strcmp(tkarray[0], "unalias") == 0){

	if(nt == 2){
		unalias();
		numAliases--;
		}
	else{
		printf("Error: incorrect number of parameters for the unalias command.\n");}

}


	else{
		fork_command();
		}

}

void fork_command(){

pid_t pid;

pid = fork();

if(pid < 0) {
	fprintf(stderr, "Fork Failed");
}

else if(pid == 0){
	execvp(tkarray[0], tkarray);
	perror("Error: ");
	exit(EXIT_FAILURE);
}

else if(pid > 0){
	wait(NULL);

}

}

void setAlias(int index){


int amount = index;

for(int i = 0; i < amount; i++){
	if(strcmp(aliases[i].command, tkarray[2]) == 0){
		amount = i;
		printf("alias '%s -> %s' has been overridden.\n", aliases[amount].name, aliases[amount].command);
		numAliases--;
		}
	}

strcpy(aliases[amount].name, tkarray[1]);
strcpy(aliases[amount].command, tkarray[2]);

printf("new alias: %s -> %s\n", aliases[amount].name, aliases[amount].command);

}

void printAliases(int amount){

if(amount == 0){
printf("There are currently no saved aliases\n");
}

else {printf("The current saved aliases are: \n");
	
	for(int i = 0; i < amount; i++){
		printf("alias %d :", i);
		printf("%s -> %s\n", aliases[i].name, aliases[i].command);
	}}
}

void checkAlias(){

for(int i = 0; i < numAliases; i++){
	if(strcmp(aliases[i].name, tkarray[0]) == 0){
		strcpy(tkarray[0], aliases[i].command);}
}

}


void unalias(){

bool found = false;

	for(int i = 0; i < numAliases; i++){
		if(strcmp(aliases[i].command, tkarray[1]) == 0){
			for(int j = i; j < sizeof(aliases)-1; j++){
				strcpy(aliases[j].name, aliases[j+1].name);
				strcpy(aliases[j].command, aliases[j+1].command);
				found = true;
			}
			
		}
	}

if(found == false){
printf("Error: No such alias exists.\n");
}

}



void writeToFile(char* fileName, char* history)
{
   
   int num;
   FILE *fptr;
   fptr = fopen(fileName,"w");

   fprintf(fptr,"%s", history);
   fclose(fptr);


}

void readFile(char* fileName)
{
   
   int num;
   char string[512];
   char* lines[20];

   FILE *fptr;
   fptr = fopen(fileName,"r");

   
   while(fgets(string, 512, fptr) != NULL){

       printf("%s\n", string);

   }

   fclose(fptr);


}

